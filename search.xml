<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>SION_HOME</title>
    <url>/2021/05/10/hello-world/</url>
    <content><![CDATA[<p><strong>初始化界面</strong></p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>hexo中html资源布置</title>
    <url>/2021/05/10/hexo%E4%B8%ADhtml%E8%B5%84%E6%BA%90%E5%B8%83%E7%BD%AE/</url>
    <content><![CDATA[<h3 id="在hexo中部署html"><a href="#在hexo中部署html" class="headerlink" title="在hexo中部署html"></a>在hexo中部署html</h3><ol>
<li>先在hexo根目录下找到source文件<br><img src="https://i.postimg.cc/nzzkbz6G/2021-05-10-221726.jpg" alt="事例1"></li>
<li>创建自定义目录，如hide文件夹,在hide目录下创建工作项目，如login，并在login中导入资源文件<br><img src="https://i.postimg.cc/Yq9Tt2w0/2021-05-10-222223.jpg" alt="事例2"></li>
</ol>
<h3 id="使资源被忽略编译"><a href="#使资源被忽略编译" class="headerlink" title="使资源被忽略编译"></a>使资源被忽略编译</h3><ol>
<li>进入在hexo根目录下的配置文件，搜索skip,添加忽略文件夹或文件<br><img src="https://i.postimg.cc/YqT439rm/2021-05-10-222758.jpg" alt="事例3"></li>
<li>注意忽略文件夹及其以下是用/**,只忽略文件夹用/*,只忽略文件用文件名</li>
</ol>
<h3 id="重新编译即可运行"><a href="#重新编译即可运行" class="headerlink" title="重新编译即可运行"></a>重新编译即可运行</h3>]]></content>
  </entry>
  <entry>
    <title>js_lrean_1</title>
    <url>/2021/06/27/js-lrean-1/</url>
    <content><![CDATA[<h3 id="类型问题"><a href="#类型问题" class="headerlink" title="类型问题"></a>类型问题</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;[]!==[] is %o&quot;</span>, [] !== []);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;NaN!=NaN is %o&quot;</span>, <span class="literal">NaN</span> != <span class="literal">NaN</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;1==true is %o&quot;</span>, <span class="number">1</span> == <span class="literal">true</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;true +1 is %d&quot;</span>, <span class="literal">true</span> + <span class="number">1</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;&#123;&#125;+1 is %d&quot;</span>, &#123;&#125; + <span class="number">1</span>);</span><br></pre></td></tr></table></figure>
<h3 id="隐式转换"><a href="#隐式转换" class="headerlink" title="隐式转换"></a>隐式转换</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> value = <span class="literal">true</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> value);</span><br><span class="line">value = (<span class="built_in">String</span>)(value);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> value);</span><br></pre></td></tr></table></figure>
<h3 id="闭包概念"><a href="#闭包概念" class="headerlink" title="闭包概念"></a>闭包概念</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addall</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">var</span> add = <span class="function"><span class="keyword">function</span> <span class="title">addone</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        count++;</span><br><span class="line">        <span class="built_in">console</span>.log(count);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> add;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> add = addall();</span><br><span class="line">add();</span><br><span class="line">add();</span><br></pre></td></tr></table></figure>
<h3 id="js表达式与语句"><a href="#js表达式与语句" class="headerlink" title="js表达式与语句"></a>js表达式与语句</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; &#125;)</span><br><span class="line"><span class="comment">//不加括号报错，原因：无括号是函数表达式，function后要加函数名，有括号是boolen判断值，函数是为隐式函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">x</span>) </span>&#123; <span class="keyword">return</span> x + <span class="number">1</span>; &#125; (<span class="number">1</span>)</span><br><span class="line"><span class="comment">//括号无值报错，原因：分组函数要有判断值，相当于</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">x</span>) </span>&#123; <span class="keyword">return</span> x + <span class="number">1</span>;&#125;</span><br><span class="line">(<span class="number">1</span>);</span><br><span class="line"><span class="comment">//,运算符</span></span><br><span class="line"><span class="comment">// fx(), fy();//两个都运行，返回fy();</span></span><br><span class="line"><span class="keyword">var</span> x = (<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(x);</span><br><span class="line"><span class="comment">//运算符exp1 || exp2,若exp1为真,返回exp1,否则返回exp2</span></span><br><span class="line"><span class="keyword">var</span> testexp = <span class="literal">true</span> || <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="literal">true</span> || <span class="literal">false</span>) <span class="built_in">console</span>.log(<span class="literal">true</span>);</span><br><span class="line"><span class="comment">//代码块=&#123;&#125;和表达式=()；()其中要有表达式    </span></span><br><span class="line"><span class="comment">//理解以下代码</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">foo</span>: f(<span class="number">3</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//&#123;&#125;代码块，foo:标签，f(3):表达式语句即函数</span></span><br><span class="line"><span class="comment">//函数也可以当成对象</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">song</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">with</span> (<span class="built_in">arguments</span>.callee) &#123;<span class="comment">//callee 是 arguments 对象的一个属性。它可以用于引用该函数的函数体内当前正在执行的函数。</span></span><br><span class="line">        <span class="built_in">console</span>.log(author + <span class="string">&#x27;:&#x27;</span> + peom);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">song.author = <span class="string">&quot;李白&quot;</span>;</span><br><span class="line">song.peom = <span class="string">&quot;汉家秦地月，流影照明妃。一上玉关道，天涯去不归&quot;</span>;</span><br><span class="line">song();</span><br></pre></td></tr></table></figure>
<h3 id="this的四大基本使用"><a href="#this的四大基本使用" class="headerlink" title="this的四大基本使用"></a>this的四大基本使用</h3><blockquote>
<p>1.纯函数的调用，this指全局</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> this_test_x = <span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">testOne</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.this_test_x);<span class="comment">//undefined的原因：单纯的js文件没得window需加上html</span></span><br><span class="line">&#125;</span><br><span class="line">testOne();</span><br></pre></td></tr></table></figure>
<blockquote>
<p>2.作为对象方法的调用,this指方法调用的上一级</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> testTwo = &#123;</span><br><span class="line">    <span class="attr">this_test_x</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="attr">func</span>: testOne</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">testTwo.func();</span><br></pre></td></tr></table></figure>
<blockquote>
<p>3.作为构造函数的调用,this指创建的对象</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">testThree</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.this_test_x = <span class="number">3</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> testThreeVar = <span class="keyword">new</span> testThree();</span><br><span class="line"><span class="built_in">console</span>.log(testThreeVar.this_test_x);</span><br></pre></td></tr></table></figure>
<blockquote>
<p>4.apply,call函数的调用,this指引入的对象</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> testFlour = &#123;</span><br><span class="line">    <span class="attr">this_test_x</span>: <span class="number">4</span></span><br><span class="line">&#125;;</span><br><span class="line">testOne.apply(testFlour);</span><br></pre></td></tr></table></figure>

<h3 id="和-的区别"><a href="#和-的区别" class="headerlink" title="==和===的区别"></a>==和===的区别</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> test_eqaul = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;test_eqaul==\&quot;1\&quot;:&quot;</span> + (test_eqaul == <span class="string">&quot;1&quot;</span>) + <span class="string">&quot;\n&quot;</span> + <span class="string">&quot;test_eqaul===1:&quot;</span> + (test_eqaul === <span class="number">1</span>));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;test_eqaul===\&quot;1\&quot;:&quot;</span> + (test_eqaul === <span class="string">&quot;1&quot;</span>) + <span class="string">&quot;\n&quot;</span> + <span class="string">&quot;test_eqaul===(Number)(\&quot;1\&quot;):&quot;</span> + (test_eqaul === (<span class="built_in">Number</span>)(<span class="string">&quot;1&quot;</span>)));</span><br><span class="line"> ==：不在意数据类型,转换成相同类型后比较，===：直接比较内存地址</span><br></pre></td></tr></table></figure>
<h3 id="值引用和赋值"><a href="#值引用和赋值" class="headerlink" title="值引用和赋值"></a>值引用和赋值</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">swap_ab</span>(<span class="params">...array_A</span>) </span>&#123;<span class="comment">//说明反序列也是赋值而不是引用</span></span><br><span class="line"></span><br><span class="line">    array_A[<span class="number">0</span>] = array_A[<span class="number">0</span>] ^ array_A[<span class="number">1</span>];<span class="comment">//俩个值交换的新方法[a,b]=[b,a]</span></span><br><span class="line">    array_A[<span class="number">1</span>] = array_A[<span class="number">0</span>] ^ array_A[<span class="number">1</span>];</span><br><span class="line">    array_A[<span class="number">0</span>] = array_A[<span class="number">0</span>] ^ array_A[<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> test_a = <span class="number">1</span>, test_b = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">var</span> test_swap = swap_ab(test_a, test_b);</span><br><span class="line"><span class="built_in">console</span>.log(test_a, test_b);</span><br><span class="line"><span class="keyword">var</span> abconstuct = &#123;</span><br><span class="line">    <span class="attr">a</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">b</span>: <span class="number">2</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">swap_abconstuct</span>(<span class="params">abconstuct</span>) </span>&#123;<span class="comment">//结构体也是赋值</span></span><br><span class="line">    abconstuct.a = abconstuct.a ^ abconstuct.b;</span><br><span class="line">    abconstuct.b = abconstuct.a ^ abconstuct.b;</span><br><span class="line">    abconstuct.a = abconstuct.a ^ abconstuct.b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(abconstuct.a, abconstuct.b);</span><br><span class="line"><span class="comment">// test_a = 1, test_b = 2;//重置ab值</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">swap_aball</span>(<span class="params"></span>) </span>&#123;<span class="comment">//在任何函数内部对外部的值都是引用</span></span><br><span class="line">    test_a = test_a ^ test_b;</span><br><span class="line">    test_b = test_a ^ test_b;</span><br><span class="line">    test_a = test_a ^ test_b;</span><br><span class="line">&#125;</span><br><span class="line">swap_aball();</span><br><span class="line"><span class="built_in">console</span>.log(test_a, test_b);</span><br><span class="line"><span class="comment">//原型prototype,在原型上添加在后续创建的类也可以使用，不使用只能在构造器中创建</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">test_no_prototype</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.a = <span class="string">&quot;a&quot;</span>;</span><br><span class="line">    &#125;     </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">test_prototype</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">test_prototype.prototype.a = <span class="string">&quot;b&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> testNoPrototype = <span class="keyword">new</span> test_no_prototype();</span><br><span class="line"><span class="keyword">var</span> testPrototype = <span class="keyword">new</span> test_prototype();</span><br><span class="line"><span class="built_in">console</span>.log(testNoPrototype.a, testPrototype.a);</span><br><span class="line"><span class="comment">//_proto_已废弃</span></span><br><span class="line"><span class="comment">// 该特性已经从 Web 标准中删除，虽然一些浏览器目前仍然支持它，但也许会在未来的某个时间停止支持，请尽量不要使用该特性。</span></span><br><span class="line"><span class="comment">//使用Object.getPrototypeOf(object)代替</span></span><br><span class="line"><span class="built_in">console</span>.log(test_prototype.prototype === <span class="built_in">Object</span>.getPrototypeOf(testPrototype));</span><br></pre></td></tr></table></figure>
<h3 id="尾递归和尾调用"><a href="#尾递归和尾调用" class="headerlink" title="尾递归和尾调用"></a>尾递归和尾调用</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun_digui</span>(<span class="params">n</span>) </span>&#123;<span class="comment">//正常递归</span></span><br><span class="line">    <span class="keyword">if</span> (n &lt; <span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> n * fun_digui(n - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun_weidigui</span>(<span class="params">n, total = <span class="number">1</span></span>) </span>&#123;<span class="comment">//尾递归</span></span><br><span class="line">    <span class="keyword">if</span> (n &lt; <span class="number">1</span>) <span class="keyword">return</span> total;</span><br><span class="line">    <span class="keyword">return</span> fun_weidigui(n - <span class="number">1</span>, n * total);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(fun_digui(<span class="number">3</span>), fun_weidigui(<span class="number">3</span>));</span><br></pre></td></tr></table></figure>
<h3 id="柯里化-接受多个参数的函数转变为接受单个参数的函数并返回余下参数的函数"><a href="#柯里化-接受多个参数的函数转变为接受单个参数的函数并返回余下参数的函数" class="headerlink" title="柯里化:接受多个参数的函数转变为接受单个参数的函数并返回余下参数的函数"></a>柯里化:接受多个参数的函数转变为接受单个参数的函数并返回余下参数的函数</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun_Curring</span>(<span class="params">n</span>) </span>&#123;<span class="comment">//简单的</span></span><br><span class="line">    <span class="keyword">return</span> fun_weidigui(n, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun_recusion_curring</span>(<span class="params">n</span>) </span>&#123;<span class="comment">//中等</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">fun_recusion_curring_two</span>(<span class="params">total = <span class="number">1</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (n &lt;= <span class="number">1</span>) <span class="keyword">return</span> total;</span><br><span class="line">        <span class="keyword">return</span> (n--) * fun_recusion_curring_two(total);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(fun_recusion_curring(<span class="number">3</span>)(<span class="number">1</span>));</span><br><span class="line"><span class="comment">//双重=&gt;的使用,类似与柯里化函数</span></span><br><span class="line"><span class="keyword">const</span> doubleArrow = <span class="function">(<span class="params">a, b</span>) =&gt;</span> <span class="function">(<span class="params">c = <span class="number">1</span></span>) =&gt;</span> a + b + c;</span><br><span class="line"><span class="keyword">const</span> test_doubleArrow = doubleArrow(<span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line"><span class="built_in">console</span>.log(test_doubleArrow());</span><br><span class="line"><span class="comment">//例子：绑定任意一个对象，可选的调用函数并附加实参</span></span><br><span class="line"><span class="keyword">const</span> bindKey = <span class="function">(<span class="params">context, fun, ...boundargs</span>) =&gt;</span> <span class="function">(<span class="params">...args</span>) =&gt;</span></span><br><span class="line">    context[fun].apply(context, [...boundargs, ...args]);</span><br><span class="line"><span class="keyword">const</span> test_bindKey = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;sion&quot;</span>,</span><br><span class="line">    <span class="attr">fun</span>: <span class="function"><span class="keyword">function</span> <span class="title">greeting</span>(<span class="params">fun_a, fun_b</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> fun_a + <span class="string">&#x27; &#x27;</span> + <span class="built_in">this</span>.name + fun_b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> test_bindKey_fun = bindKey(test_bindKey, <span class="string">&quot;fun&quot;</span>);<span class="comment">//演示柯里化函数，用双括号也可</span></span><br><span class="line"><span class="built_in">console</span>.log(test_bindKey_fun(<span class="string">&quot;hi&quot;</span>, <span class="string">&quot;!&quot;</span>));</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>js_lrean_2</title>
    <url>/2021/06/28/js-lrean-2/</url>
    <content><![CDATA[<h1 id="js函数相关"><a href="#js函数相关" class="headerlink" title="js函数相关"></a>js函数相关</h1><h2 id="累加器"><a href="#累加器" class="headerlink" title="累加器"></a>累加器</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> accumulate = <span class="function">(<span class="params">...nums</span>) =&gt;</span></span><br><span class="line">    nums.reduce(<span class="function">(<span class="params">acc, n</span>) =&gt;</span> [...acc, n + acc.slice(-<span class="number">1</span>)], []);<span class="comment">//解析括号,+符号转换成数字</span></span><br><span class="line"><span class="comment">//...的使用，把数组展开成一系列参数序列，这里是将一系列参数视为数组</span></span><br><span class="line"><span class="comment">//数组的reduce函数,接受一个函数作为累加器，从左到右开始缩减</span></span><br><span class="line"><span class="comment">//array.reduce(function(total, currentValue, currentIndex, arr), initialValue),返回值：函数累计处理的结果函数累计处理的结果,只有total, currentValue是必选的</span></span><br><span class="line"><span class="comment">//数组的arr.slice([begin[, end]])函数，返回slice() 方法返回一个新的数组对象，这一对象是一个由 begin 和 end 决定的原数组的浅拷贝（包括 begin，不包括end）</span></span><br><span class="line"><span class="comment">//如果该参数为负数，则表示从原数组中的倒数第几个元素开始提取，slice(-2) 表示提取原数组中的倒数第二个元素到最后一个元素（包含最后一个元素）。</span></span><br><span class="line"><span class="comment">//箭头函数=&gt;，()=&gt;不带参数，(var)=&gt;带参数，后接返回值</span></span><br><span class="line"><span class="comment">//回调函数第一次执行时，accumulator 和currentValue的取值有两种情况：</span></span><br><span class="line"><span class="comment">//如果调用reduce()时提供了initialValue，accumulator取值为initialValue，currentValue取数组中的第一个值；</span></span><br><span class="line"><span class="comment">//如果没有提供 initialValue，那么accumulator取数组中的第一个值，currentValue取数组中的第二个值。</span></span><br><span class="line"><span class="comment">//测试</span></span><br><span class="line"><span class="keyword">var</span> array = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">2</span>];</span><br><span class="line"><span class="built_in">console</span>.log(accumulate(...array));</span><br><span class="line"><span class="built_in">console</span>.log(accumulate(<span class="number">1</span>, <span class="number">3</span>, <span class="number">2</span>));</span><br></pre></td></tr></table></figure>
<details>
<summary>运行结果</summary>
Array(3)
0: "1"
1: "31"
2: "231"
length: 3
__proto__: Array(0)
</details>

<h2 id="添加类-style中的，非js的"><a href="#添加类-style中的，非js的" class="headerlink" title="添加类(style中的，非js的)"></a>添加类(style中的，非js的)</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> addclass = <span class="function">(<span class="params">el, classname</span>) =&gt;</span> el.classList.add(classname);</span><br><span class="line"><span class="comment">//测试</span></span><br><span class="line">addclass(<span class="built_in">document</span>.querySelector(<span class="string">&#x27;p&#x27;</span>), <span class="string">&#x27;special&#x27;</span>);<span class="comment">//node运行报错,没得document</span></span><br></pre></td></tr></table></figure>
<h2 id="日期函数"><a href="#日期函数" class="headerlink" title="日期函数"></a>日期函数</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//str.split([separator[, limit]]),返回源字符串以分隔符出现位置分隔而成的一个 Array </span></span><br><span class="line"><span class="keyword">const</span> addDaysToDate = <span class="function">(<span class="params">date, n</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> d = <span class="keyword">new</span> <span class="built_in">Date</span>(date);</span><br><span class="line">    d.setDate(d.getDate() + n);</span><br><span class="line">    <span class="keyword">return</span> d.toISOString().split(<span class="string">&#x27;T&#x27;</span>)[<span class="number">0</span>];</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(addDaysToDate(<span class="string">&#x27;2020-10-15&#x27;</span>, <span class="number">10</span>));</span><br></pre></td></tr></table></figure>
<details>
<summary>运行结果</summary>
2020-10-25
</details>

<h2 id="事件监听器"><a href="#事件监听器" class="headerlink" title="事件监听器"></a>事件监听器</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//addEventListen</span></span><br><span class="line"><span class="comment">//element.addEventListener(event, function ,可选)option, useCapture可选</span></span><br><span class="line"><span class="comment">//数组循环arr.forEach(callback(currentValue [, index [, array]])[, thisArg])</span></span><br><span class="line"><span class="comment">// const addEventListenAll = (targets,event,fun) =&gt; &#123; &#125;</span></span><br><span class="line"><span class="keyword">const</span> addAllEventListeners = <span class="function">(<span class="params">targets, type, fun, option</span>) =&gt;</span> &#123;</span><br><span class="line">    targets.forEach(<span class="function"><span class="params">element</span> =&gt;</span> &#123;</span><br><span class="line">        element.addEventListener(type, fun, option);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> option = &#123;</span><br><span class="line">    <span class="attr">once</span>: <span class="literal">true</span>, <span class="comment">//表示单个事件只工作一次</span></span><br><span class="line">    <span class="attr">capture</span>: <span class="literal">true</span> <span class="comment">//表示捕获时触发</span></span><br><span class="line">&#125;;</span><br><span class="line">addAllEventListeners(<span class="built_in">document</span>.querySelectorAll(<span class="string">&#x27;a&#x27;</span>), <span class="string">&#x27;click&#x27;</span>, <span class="function">() =&gt;</span></span><br><span class="line">    alert(<span class="string">&#x27;Clicked a link&#x27;</span>), option</span><br><span class="line">);</span><br><span class="line"><span class="comment">//单个事件添加多个动作</span></span><br><span class="line"><span class="keyword">const</span> addEventListenerMultiple = <span class="function">(<span class="params">target, type, fun, option</span>) =&gt;</span> &#123;</span><br><span class="line">    type.forEach(<span class="function"><span class="params">element</span> =&gt;</span> &#123;</span><br><span class="line">        target.addEventListener(element, fun, option);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//测试</span></span><br><span class="line">addEventListenerMultiple(<span class="built_in">document</span>.querySelector(<span class="string">&#x27;.testClassOne&#x27;</span>),</span><br><span class="line">    [<span class="string">&#x27;click&#x27;</span>, <span class="string">&#x27;mousedown&#x27;</span>],</span><br><span class="line">    <span class="function">() =&gt;</span> &#123; alert(<span class="string">&#x27;hello!&#x27;</span>); &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<h2 id="Object-assign函数"><a href="#Object-assign函数" class="headerlink" title="Object.assign函数"></a>Object.assign函数</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Object.assign(target, ...sources),将多个source分配到target,返回target</span></span><br><span class="line"><span class="keyword">const</span> addstyle = <span class="function">(<span class="params">target, sources</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">Object</span>.assign(target.style, sources);<span class="comment">//将单个目标的style元素添加新的元素</span></span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//测试</span></span><br><span class="line">addstyle(<span class="built_in">document</span>.querySelector(<span class="string">&#x27;.testClassOne&#x27;</span>), &#123;<span class="comment">//只能选单个元素，getby,seletall都不可用</span></span><br><span class="line">    <span class="attr">background</span>: <span class="string">&#x27;black&#x27;</span>,</span><br><span class="line">    <span class="attr">color</span>: <span class="string">&#x27;#ffff00&#x27;</span></span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h2 id="Array-prototype-every"><a href="#Array-prototype-every" class="headerlink" title="Array.prototype.every()"></a>Array.prototype.every()</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Array.prototype.every(),prototype时原型对象，every测试数组内是否的每一个值都能通过一个函数，返回boolen值</span></span><br><span class="line"><span class="comment">//例子：某个数组中是否全部大于1，注意 (array, fun=Boolean) =&gt;array.every(fun)也是对的</span></span><br><span class="line"><span class="keyword">const</span> allArrayJudgement = <span class="function">(<span class="params">array, fun = <span class="built_in">Number</span></span>) =&gt;</span> &#123;<span class="comment">//默认此参数为非undefin类型即可</span></span><br><span class="line">    <span class="keyword">return</span> array.every(fun);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//测试</span></span><br><span class="line"><span class="built_in">console</span>.log(allArrayJudgement([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], <span class="function"><span class="params">x</span> =&gt;</span> x &gt; <span class="number">1</span>));<span class="comment">//函数可自选，造成不同效果</span></span><br></pre></td></tr></table></figure>
<details>
<summary>运行结果</summary>
false
</details>

<h2 id="Array-prototype-some-函数"><a href="#Array-prototype-some-函数" class="headerlink" title="Array.prototype.some()函数"></a>Array.prototype.some()函数</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Array.some(callback(element[, index[, array]])[, thisArg]),some测试数组内是否有一个通过一个函数，返回boolen值</span></span><br><span class="line"><span class="keyword">const</span> allArrayMaybeExist = <span class="function">(<span class="params">array, fun = <span class="built_in">Boolean</span></span>) =&gt;</span> array.some(fun);</span><br><span class="line"><span class="comment">//测试</span></span><br><span class="line"><span class="built_in">console</span>.log(allArrayMaybeExist([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], <span class="function"><span class="params">x</span> =&gt;</span> x &gt; <span class="number">1</span>));<span class="comment">//函数可自选，造成不同效果</span></span><br></pre></td></tr></table></figure>
<details>
<summary>运行结果</summary>
true
</details>

<h2 id="Array-prototype-map"><a href="#Array-prototype-map" class="headerlink" title="Array.prototype.map"></a>Array.prototype.map</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Array.prototype.map(function callback(currentValue[, index[, array]])&#123;&#125;[, thisArg])</span></span><br><span class="line"><span class="comment">//返回一个由原数组每个元素执行回调函数的结果组成的新数组。</span></span><br><span class="line"><span class="comment">//cureenValue当前元素值，index当前数组元素坐标, thisArg=this</span></span><br><span class="line"><span class="keyword">const</span> mapString = <span class="function">(<span class="params">str, func</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> str.split(<span class="string">&#x27; &#x27;</span>).map(<span class="function">(<span class="params">values, index</span>) =&gt;</span> func(values, index, str)).join(<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(mapString(<span class="string">&quot;hi world&quot;</span>, <span class="function"><span class="params">array</span> =&gt;</span> array.toUpperCase()));</span><br><span class="line"><span class="keyword">const</span> aperture = <span class="function">(<span class="params">n, array</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> n &gt; array.length ? [] : array.map(<span class="function">(<span class="params">_, index</span>) =&gt;</span> array.slice(index, index + n));</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//测试</span></span><br><span class="line"><span class="built_in">console</span>.log(aperture(<span class="number">3</span>, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]));</span><br></pre></td></tr></table></figure>
<details>
<summary>运行结果</summary>
HI WORLD
Array(5)
0: (3) [1, 2, 3]
1: (3) [2, 3, 4]
2: (3) [3, 4, 5]
3: (2) [4, 5]
4: [5]
length: 5
</details>

<h2 id="Array-from"><a href="#Array-from" class="headerlink" title="Array.from"></a>Array.from</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Array.from(arrayLike[, mapFn[, thisArg]]),arrayLike类数组或可迭代对象，mapFn:新数组中的每个元素会执行该回调函数</span></span><br><span class="line"><span class="comment">//Array.from(obj, mapFn, thisArg) 就相当于 Array.from(obj).map(mapFn, thisArg)</span></span><br><span class="line"><span class="comment">//伪数组：拥有一个length属性和若干索引属性的对象</span></span><br><span class="line"><span class="comment">//变量命名前面加个下划线表示私有使用下划线作为命名的意义一般是，这个变量是调用需要的,无实际作用且不想其名字了，用于避免制造信息噪音。</span></span><br><span class="line"><span class="keyword">const</span> craetiCoilArray = <span class="function">(<span class="params">fisrt, end</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Array</span>.from(&#123; <span class="attr">length</span>: <span class="built_in">Math</span>.ceil(end / fisrt) &#125;, <span class="function">(<span class="params">_, i</span>) =&gt;</span> (i + <span class="number">1</span>) * fisrt);<span class="comment">//和上面一样当前元素值没被使用</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//测试</span></span><br><span class="line"><span class="built_in">console</span>.log(craetiCoilArray(<span class="number">5</span>, <span class="number">25</span>));</span><br><span class="line">&lt;details&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">//忽略额外参数的函数</span></span><br><span class="line"><span class="keyword">const</span> binary = <span class="function"><span class="params">fn</span> =&gt;</span> (<span class="function">(<span class="params">a, b</span>) =&gt;</span> fn(a, b));</span><br><span class="line"><span class="keyword">const</span> fun = <span class="function">(<span class="params">a, b, c</span>) =&gt;</span> a + b + c;<span class="comment">//此为字符</span></span><br><span class="line"><span class="built_in">console</span>.log([<span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;0&#x27;</span>].map(binary(fun)));<span class="comment">//当前元素值与下标相比</span></span><br><span class="line">&lt;details&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<summary>运行结果</summary>
0: 5
1: 10
2: 15
3: 20
4: 25
length: 5
</details>
<summary>运行结果</summary>
0: "20undefined"
1: "11undefined"
2: "02undefined"
length: 3
</details> 

<h2 id="binarysreach"><a href="#binarysreach" class="headerlink" title="binarysreach"></a>binarysreach</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> binarysreach = <span class="function">(<span class="params">arry, item</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> first = <span class="number">0</span>, end = arry.length - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (first &lt;= end) &#123;</span><br><span class="line">        <span class="keyword">const</span> mid = <span class="built_in">Math</span>.floor((first + end) / <span class="number">2</span>);</span><br><span class="line">        <span class="keyword">const</span> guess = arry[mid];</span><br><span class="line">        <span class="keyword">if</span> (guess === item) <span class="keyword">return</span> mid;</span><br><span class="line">        <span class="keyword">if</span> (item &gt; guess) end = mid - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> first = mid + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//测试</span></span><br><span class="line"><span class="built_in">console</span>.log(binarysreach([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">7</span>], <span class="number">3</span>));</span><br></pre></td></tr></table></figure>
<h2 id="func-apply"><a href="#func-apply" class="headerlink" title="func.apply"></a>func.apply</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//func.apply(thisArg, [argsArray]),返回func函数的结果,[argsArray]作为函数func的参数,this不用说了</span></span><br><span class="line"><span class="comment">//thisArg在非严格情况下，值为null和undefined的话，this指向全局对象</span></span><br><span class="line"><span class="keyword">var</span> arrayapply = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>];</span><br><span class="line"><span class="keyword">var</span> elementsapply = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>];</span><br><span class="line">arrayapply.push.apply(arrayapply, elementsapply);</span><br><span class="line"><span class="built_in">console</span>.info(arrayapply);</span><br></pre></td></tr></table></figure>
<h2 id="Array-isArray"><a href="#Array-isArray" class="headerlink" title="Array.isArray"></a>Array.isArray</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Array.isArray(obj),确定obj是否是数组，返回true or flase</span></span><br><span class="line"><span class="keyword">const</span> castArray = <span class="function">(<span class="params">isarray</span>) =&gt;</span> &#123; <span class="keyword">return</span> <span class="built_in">Array</span>.isArray(isarray) ? isarray : [isarray]; &#125;;<span class="comment">//和下面代码类似</span></span><br><span class="line"><span class="keyword">const</span> castArray_other = <span class="function">(<span class="params">...isarray</span>) =&gt;</span> &#123; <span class="keyword">return</span> [...isarray]; &#125;;<span class="comment">//将参数转为数组</span></span><br><span class="line"><span class="built_in">console</span>.log(castArray(<span class="number">1</span>), castArray_other(<span class="number">2</span>));</span><br></pre></td></tr></table></figure>
<h2 id="reduce进阶"><a href="#reduce进阶" class="headerlink" title="reduce进阶"></a>reduce进阶</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> compose_reduce = <span class="function">(<span class="params">...args</span>) =&gt;</span></span><br><span class="line">    args.reduce(<span class="function">(<span class="params">total, index</span>) =&gt;</span> <span class="function">(<span class="params">...argc</span>) =&gt;</span> total(index(...argc)));</span><br><span class="line"><span class="comment">//原理没有初始化total为第一个元素，index为第二个元素，双重=&gt;使用代表柯里化</span></span><br><span class="line"><span class="comment">//test_reduce</span></span><br><span class="line"><span class="keyword">const</span> addATob = <span class="function">(<span class="params">a, b</span>) =&gt;</span> a + b;</span><br><span class="line"><span class="keyword">const</span> addBySelf = <span class="function">(<span class="params">a</span>) =&gt;</span> <span class="built_in">Math</span>.pow(a, <span class="number">2</span>);</span><br><span class="line"><span class="keyword">const</span> test_reduce = compose_reduce(addBySelf, addATob);</span><br><span class="line"><span class="built_in">console</span>.log(test_reduce(<span class="number">1</span>, <span class="number">2</span>));</span><br></pre></td></tr></table></figure>
<h2 id="Set类"><a href="#Set类" class="headerlink" title="Set类"></a>Set类</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Set类，set类中只允许储存唯一值，即不能重复出现</span></span><br><span class="line"><span class="keyword">const</span> filterNoUnique = <span class="function"><span class="params">arry</span> =&gt;</span> [...new <span class="built_in">Set</span>(arry)].filter(<span class="function"><span class="params">i</span> =&gt;</span> array.indexOf(i) === array.lastIndexOf(i));</span><br><span class="line"><span class="keyword">var</span> test_array = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">3</span>];</span><br><span class="line"><span class="built_in">console</span>.log(filterNoUnique(test_array));</span><br></pre></td></tr></table></figure>
<h2 id="in的作用和Object-values-obj-函数"><a href="#in的作用和Object-values-obj-函数" class="headerlink" title="in的作用和Object.values(obj)函数"></a>in的作用和Object.values(obj)函数</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//in作用，一般：prop in object，返回Boolean值，循环：for (variable in object)每次variable会被赋予不同值</span></span><br><span class="line"><span class="comment">//特殊：结合三元运算符一起使用，prop in object ? x : y;</span></span><br><span class="line"><span class="comment">//Object.values(obj),返回：一个包含对象自身的所有可枚举属性值的数组。</span></span><br><span class="line"><span class="keyword">const</span> object_dig = <span class="function">(<span class="params">obj, target</span>) =&gt;</span></span><br><span class="line">    target <span class="keyword">in</span> obj ? obj[target]</span><br><span class="line">        : <span class="built_in">Object</span>.values(obj).reduce(<span class="function">(<span class="params">acc, val</span>) =&gt;</span> &#123;<span class="comment">//若第一次累加没找到，acc还是undefined,val向后移位</span></span><br><span class="line">            <span class="keyword">if</span> (acc !== <span class="literal">undefined</span>) <span class="keyword">return</span> acc;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">typeof</span> val === <span class="string">&#x27;object&#x27;</span>) <span class="keyword">return</span> object_dig(val, target);</span><br><span class="line">        &#125;, <span class="literal">undefined</span>);<span class="comment">//若没找到返回初始值undefined</span></span><br><span class="line"><span class="keyword">const</span> data = &#123;</span><br><span class="line">    <span class="attr">level1</span>: &#123;</span><br><span class="line">        <span class="attr">level2</span>: &#123;</span><br><span class="line">            <span class="attr">level3</span>: <span class="string">&#x27;some data&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">level4</span>: &#123;</span><br><span class="line">        <span class="attr">level5</span>: &#123;</span><br><span class="line">            <span class="attr">level6</span>: <span class="string">&#x27;other data&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(object_dig(data, <span class="string">&quot;level6&quot;</span>));</span><br></pre></td></tr></table></figure>
<h2 id="memorization的使用"><a href="#memorization的使用" class="headerlink" title="memorization的使用"></a>memorization的使用</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//memorization的使用，用空间换时间,加上闭包用数组或者类列表队列map等储存结果</span></span><br><span class="line"><span class="keyword">const</span> factorialMemo_normal = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> arry = [];</span><br><span class="line">    <span class="keyword">const</span> factorial = <span class="function"><span class="params">n</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (arry[n - <span class="number">1</span>]) &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&quot;remenber&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> arry[n - <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> ans = factorial(n - <span class="number">1</span>) * n;</span><br><span class="line">            arry[n - <span class="number">1</span>] = ans;</span><br><span class="line">            <span class="keyword">return</span> ans;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> factorial;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> factorialMemo_test = factorialMemo_normal();</span><br><span class="line"><span class="built_in">console</span>.log(factorialMemo_test(<span class="number">5</span>));</span><br><span class="line"><span class="built_in">console</span>.log(factorialMemo_test(<span class="number">5</span>));</span><br></pre></td></tr></table></figure>
<h2 id="values和reduce结合"><a href="#values和reduce结合" class="headerlink" title="values和reduce结合"></a>values和reduce结合</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> combine = <span class="function">(<span class="params">a, b, porps</span>) =&gt;</span> <span class="built_in">Object</span>.values(</span><br><span class="line">    [...a, ...b].reduce(<span class="function">(<span class="params">accumulate, next</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (next[porps])</span><br><span class="line">            accumulate[next[porps]] = next[porps] ? &#123; ...accumulate[next[porps]], ...next &#125; : &#123; ...next &#125;;</span><br><span class="line">        <span class="comment">// &#123; ...accumulate[next[porps]], ...next &#125;作用把两个对象结合在一起，相同项消去</span></span><br><span class="line">        <span class="keyword">return</span> accumulate;</span><br><span class="line">    &#125;, &#123;&#125;)<span class="comment">//必须初始化保障安全，且从头筛选</span></span><br><span class="line">);</span><br><span class="line"><span class="keyword">const</span> combinex = [</span><br><span class="line">    &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">&#x27;John&#x27;</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">name</span>: <span class="string">&#x27;Maria&#x27;</span> &#125;</span><br><span class="line">];</span><br><span class="line"><span class="keyword">const</span> combiney = [</span><br><span class="line">    &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">age</span>: <span class="number">28</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">id</span>: <span class="number">3</span>, <span class="attr">age</span>: <span class="number">26</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">age</span>: <span class="number">3</span> &#125;</span><br><span class="line">];</span><br><span class="line"><span class="built_in">console</span>.log(combine(combinex, combiney, <span class="string">&quot;id&quot;</span>));</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>markdown的使用</title>
    <url>/2021/05/10/learn-Markdown/</url>
    <content><![CDATA[<p>简介：记录本人markdown的使用,格式为代码在前列子在后</p>
<ol>
<li><h3 id="标题语法"><a href="#标题语法" class="headerlink" title="标题语法"></a>标题语法</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 标题语法</span></span><br><span class="line">&lt;h1&gt;标题语法&lt;/h1&gt;</span><br><span class="line"><span class="comment">#的个数等于h后面的位数</span></span><br></pre></td></tr></table></figure>
<!-- # 标题语法
<h1>标题语法</h1> --></li>
<li><h3 id="创建段落"><a href="#创建段落" class="headerlink" title="创建段落"></a>创建段落</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">这是个段落，有点长</span><br><span class="line">直接换行不接空格</span><br></pre></td></tr></table></figure></li>
<li><h3 id="强调语法"><a href="#强调语法" class="headerlink" title="强调语法"></a>强调语法</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">原句：这是个**强调句**</span><br></pre></td></tr></table></figure>
<p>原句：这是个<strong>强调句</strong></p>
</li>
<li><h3 id="引用语法"><a href="#引用语法" class="headerlink" title="引用语法"></a>引用语法</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt;单引用加</span><br><span class="line">&gt;&gt;嵌套引用</span><br></pre></td></tr></table></figure>
<blockquote>
<p>单引用加</p>
<blockquote>
<p>嵌套引用</p>
</blockquote>
</blockquote>
</li>
<li><h3 id="列表语法"><a href="#列表语法" class="headerlink" title="列表语法"></a>列表语法</h3><ol>
<li><h4 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">1.加空格，需以一开头，后续数字不做要求</span><br></pre></td></tr></table></figure></li>
<li><h4 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">+-*加空格</span><br></pre></td></tr></table></figure></li>
<li><h4 id="缩进列表"><a href="#缩进列表" class="headerlink" title="缩进列表"></a>缩进列表</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">内部加空格即可，一般用tab</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
<li><h3 id="分割线语法"><a href="#分割线语法" class="headerlink" title="分割线语法"></a>分割线语法</h3></li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">---或者***或者——————</span><br></pre></td></tr></table></figure>
<ol start="7">
<li><h3 id="链接语法"><a href="#链接语法" class="headerlink" title="链接语法"></a>链接语法</h3></li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[百度](www.baidu.com  <span class="string">&quot;百度一下，你就知道&quot;</span>)</span><br><span class="line">&lt;wwww.baidu.com&gt;</span><br><span class="line">*[百度](www.baidu.com  <span class="string">&quot;百度一下，你就知道&quot;</span>)*</span><br></pre></td></tr></table></figure>
<p><a href="www.baidu.com" title="百度一下，你就知道">百度</a><br> &lt;w<a href="http://www.baidu.com&gt;/">www.baidu.com&gt;</a><br> <em><a href="www.baidu.com" title="百度一下，你就知道">百度</a></em></p>
<ol start="7">
<li><h3 id="图片语法"><a href="#图片语法" class="headerlink" title="图片语法"></a>图片语法</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">![图片](链接 <span class="string">&quot;代替文本&quot;</span>)</span><br></pre></td></tr></table></figure>
<p><img src="https://img.zcool.cn/community/01c8f15aeac135a801207fa16836ae.jpg@1280w_1l_2o_100sh.jpg" alt="图片" title="测试图片"></p>
</li>
<li><p>###转义字符</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">\加任意特殊字符</span><br></pre></td></tr></table></figure>
<p>*</p>
</li>
</ol>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2021/10/10/%E8%8A%82%E6%B5%81%E5%92%8C%E9%98%B2%E6%8A%96/</url>
    <content><![CDATA[<h2 id="节流"><a href="#节流" class="headerlink" title="节流"></a>节流</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">定义:某个函数在一定时间间隔内（例如 3 秒）只执行一次，在这 3 秒内 无视后来产生的函数调用请求，也不会延长时间间隔</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">throttle</span>(<span class="params">fn, ...str</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> isEnd = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!isEnd) <span class="keyword">return</span>;</span><br><span class="line">        isEnd = <span class="literal">false</span></span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            fn.apply(<span class="built_in">this</span>, str)</span><br><span class="line">            isEnd = <span class="literal">true</span></span><br><span class="line">        &#125;, <span class="number">2000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="防抖"><a href="#防抖" class="headerlink" title="防抖"></a>防抖</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">定义:某个函数在某段时间内，无论触发了多少次回调，都只执行最后一次</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">debounce</span>(<span class="params">fn, ...str</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> tiemer;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">clearTimeout</span>(tiemer)</span><br><span class="line">        tiemer = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            fn.apply(<span class="built_in">this</span>, str)</span><br><span class="line">        &#125;, <span class="number">2000</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="剪切板的使用"><a href="#剪切板的使用" class="headerlink" title="剪切板的使用"></a>剪切板的使用</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//粘贴</span></span><br><span class="line">navigator.clipboard.readText().then(<span class="function"><span class="params">clipText</span> =&gt;</span> <span class="built_in">document</span>.getElementById(<span class="string">&quot;p&quot;</span>).value = clipText)</span><br><span class="line"><span class="comment">// 复制</span></span><br><span class="line">navigator.clipboard.writeText(<span class="string">&quot;tess&quot;</span>);</span><br></pre></td></tr></table></figure>

<h2 id="数组交集"><a href="#数组交集" class="headerlink" title="数组交集"></a>数组交集</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">intersect1</span>(<span class="params">num1, num2</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> map = &#123;&#125;;</span><br><span class="line">    <span class="keyword">const</span> ans = [];</span><br><span class="line">    <span class="comment">//构建哈希表</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">of</span> num1) &#123;</span><br><span class="line">        <span class="keyword">if</span> (map[key])</span><br><span class="line">            map[key]++</span><br><span class="line">        <span class="keyword">else</span> map[key] = <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//从哈希表中查相同值</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">of</span> num2) &#123;</span><br><span class="line">        <span class="keyword">if</span> (map[key] &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            ans.push(key)</span><br><span class="line">            map[key]--</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">intersect2</span>(<span class="params">num1, num2</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> map = &#123;&#125;;</span><br><span class="line">    <span class="keyword">let</span> ans = []</span><br><span class="line">    map = num1.reduce(<span class="function">(<span class="params">previous, current</span>) =&gt;</span> &#123;</span><br><span class="line">        previous[current] ? previous[current]++ : previous[current] = <span class="number">1</span></span><br><span class="line">    &#125;, &#123;&#125;);</span><br><span class="line">    num2.foreach(<span class="function">(<span class="params">currentValue</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (map[currentValue] &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            ans.push(currentValue)</span><br><span class="line">            map[currentValue]--</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="洗牌算法"><a href="#洗牌算法" class="headerlink" title="洗牌算法"></a>洗牌算法</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">shuffle</span>(<span class="params">arr, size</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> length = arr.length;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> index = <span class="number">0</span>; index &lt; size; index++) &#123;</span><br><span class="line">        <span class="comment">//在0到arr.length-index中随机取值</span></span><br><span class="line">        <span class="keyword">let</span> randomIndex = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * (length - index))</span><br><span class="line">        <span class="comment">//交换1</span></span><br><span class="line">        <span class="keyword">let</span> temp = arr[randomIndex]</span><br><span class="line">        arr[randomIndex] = arr[length - index - <span class="number">1</span>]</span><br><span class="line">        arr[length - index - <span class="number">1</span>] = temp</span><br><span class="line">        <span class="comment">//交换2</span></span><br><span class="line">        <span class="comment">// arr[randomIndex] = arr[randomIndex] ^ arr[length - index - 1]</span></span><br><span class="line">        <span class="comment">// arr[length - index - 1] = arr[randomIndex] ^ arr[length - index - 1]</span></span><br><span class="line">        <span class="comment">// arr[randomIndex] = arr[randomIndex] ^ arr[length - index - 1]</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//切片交换顺序后的数组</span></span><br><span class="line">    <span class="keyword">return</span> arr.slice(-size)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
</search>
