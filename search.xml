<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>SION_HOME</title>
    <url>/2021/05/10/hello-world/</url>
    <content><![CDATA[<p><strong>初始化界面</strong></p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>markdown的使用</title>
    <url>/2021/05/10/learn-Markdown/</url>
    <content><![CDATA[<p>简介：记录本人markdown的使用,格式为代码在前列子在后</p>
<ol>
<li><h3 id="标题语法"><a href="#标题语法" class="headerlink" title="标题语法"></a>标题语法</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 标题语法</span></span><br><span class="line">&lt;h1&gt;标题语法&lt;/h1&gt;</span><br><span class="line"><span class="comment">#的个数等于h后面的位数</span></span><br></pre></td></tr></table></figure>
<!-- # 标题语法
<h1>标题语法</h1> --></li>
<li><h3 id="创建段落"><a href="#创建段落" class="headerlink" title="创建段落"></a>创建段落</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">这是个段落，有点长</span><br><span class="line">直接换行不接空格</span><br></pre></td></tr></table></figure></li>
<li><h3 id="强调语法"><a href="#强调语法" class="headerlink" title="强调语法"></a>强调语法</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">原句：这是个**强调句**</span><br></pre></td></tr></table></figure>
<p>原句：这是个<strong>强调句</strong></p>
</li>
<li><h3 id="引用语法"><a href="#引用语法" class="headerlink" title="引用语法"></a>引用语法</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt;单引用加</span><br><span class="line">&gt;&gt;嵌套引用</span><br></pre></td></tr></table></figure>
<blockquote>
<p>单引用加</p>
<blockquote>
<p>嵌套引用</p>
</blockquote>
</blockquote>
</li>
<li><h3 id="列表语法"><a href="#列表语法" class="headerlink" title="列表语法"></a>列表语法</h3><ol>
<li><h4 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">1.加空格，需以一开头，后续数字不做要求</span><br></pre></td></tr></table></figure></li>
<li><h4 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">+-*加空格</span><br></pre></td></tr></table></figure></li>
<li><h4 id="缩进列表"><a href="#缩进列表" class="headerlink" title="缩进列表"></a>缩进列表</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">内部加空格即可，一般用tab</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
<li><h3 id="分割线语法"><a href="#分割线语法" class="headerlink" title="分割线语法"></a>分割线语法</h3></li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">---或者***或者——————</span><br></pre></td></tr></table></figure>
<ol start="7">
<li><h3 id="链接语法"><a href="#链接语法" class="headerlink" title="链接语法"></a>链接语法</h3></li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[百度](www.baidu.com  <span class="string">&quot;百度一下，你就知道&quot;</span>)</span><br><span class="line">&lt;wwww.baidu.com&gt;</span><br><span class="line">*[百度](www.baidu.com  <span class="string">&quot;百度一下，你就知道&quot;</span>)*</span><br></pre></td></tr></table></figure>
<p><a href="www.baidu.com" title="百度一下，你就知道">百度</a><br> &lt;w<a href="http://www.baidu.com&gt;/">www.baidu.com&gt;</a><br> <em><a href="www.baidu.com" title="百度一下，你就知道">百度</a></em></p>
<ol start="7">
<li><h3 id="图片语法"><a href="#图片语法" class="headerlink" title="图片语法"></a>图片语法</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">![图片](链接 <span class="string">&quot;代替文本&quot;</span>)</span><br></pre></td></tr></table></figure>
<p><img src="https://img.zcool.cn/community/01c8f15aeac135a801207fa16836ae.jpg@1280w_1l_2o_100sh.jpg" alt="图片" title="测试图片"></p>
</li>
<li><p>###转义字符</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">\加任意特殊字符</span><br></pre></td></tr></table></figure>
<p>*</p>
</li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>hexo中html资源布置</title>
    <url>/2021/05/10/hexo%E4%B8%ADhtml%E8%B5%84%E6%BA%90%E5%B8%83%E7%BD%AE/</url>
    <content><![CDATA[<h3 id="在hexo中部署html"><a href="#在hexo中部署html" class="headerlink" title="在hexo中部署html"></a>在hexo中部署html</h3><ol>
<li>先在hexo根目录下找到source文件<br><img src="https://i.postimg.cc/nzzkbz6G/2021-05-10-221726.jpg" alt="事例1"></li>
<li>创建自定义目录，如hide文件夹,在hide目录下创建工作项目，如login，并在login中导入资源文件<br><img src="https://i.postimg.cc/Yq9Tt2w0/2021-05-10-222223.jpg" alt="事例2"></li>
</ol>
<h3 id="使资源被忽略编译"><a href="#使资源被忽略编译" class="headerlink" title="使资源被忽略编译"></a>使资源被忽略编译</h3><ol>
<li>进入在hexo根目录下的配置文件，搜索skip,添加忽略文件夹或文件<br><img src="https://i.postimg.cc/YqT439rm/2021-05-10-222758.jpg" alt="事例3"></li>
<li>注意忽略文件夹及其以下是用/**,只忽略文件夹用/*,只忽略文件用文件名</li>
</ol>
<h3 id="重新编译即可运行"><a href="#重新编译即可运行" class="headerlink" title="重新编译即可运行"></a>重新编译即可运行</h3>]]></content>
  </entry>
  <entry>
    <title>js_lrean_1</title>
    <url>/2021/06/27/js-lrean-1/</url>
    <content><![CDATA[<h3 id="类型问题"><a href="#类型问题" class="headerlink" title="类型问题"></a>类型问题</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;[]!==[] is %o&quot;</span>, [] !== []);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;NaN!=NaN is %o&quot;</span>, <span class="literal">NaN</span> != <span class="literal">NaN</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;1==true is %o&quot;</span>, <span class="number">1</span> == <span class="literal">true</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;true +1 is %d&quot;</span>, <span class="literal">true</span> + <span class="number">1</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;&#123;&#125;+1 is %d&quot;</span>, &#123;&#125; + <span class="number">1</span>);</span><br></pre></td></tr></table></figure>
<h3 id="隐式转换"><a href="#隐式转换" class="headerlink" title="隐式转换"></a>隐式转换</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> value = <span class="literal">true</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> value);</span><br><span class="line">value = (<span class="built_in">String</span>)(value);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> value);</span><br></pre></td></tr></table></figure>
<h3 id="闭包概念"><a href="#闭包概念" class="headerlink" title="闭包概念"></a>闭包概念</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addall</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">var</span> add = <span class="function"><span class="keyword">function</span> <span class="title">addone</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        count++;</span><br><span class="line">        <span class="built_in">console</span>.log(count);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> add;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> add = addall();</span><br><span class="line">add();</span><br><span class="line">add();</span><br></pre></td></tr></table></figure>
<h3 id="js表达式与语句"><a href="#js表达式与语句" class="headerlink" title="js表达式与语句"></a>js表达式与语句</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; &#125;)</span><br><span class="line"><span class="comment">//不加括号报错，原因：无括号是函数表达式，function后要加函数名，有括号是boolen判断值，函数是为隐式函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">x</span>) </span>&#123; <span class="keyword">return</span> x + <span class="number">1</span>; &#125; (<span class="number">1</span>)</span><br><span class="line"><span class="comment">//括号无值报错，原因：分组函数要有判断值，相当于</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">x</span>) </span>&#123; <span class="keyword">return</span> x + <span class="number">1</span>;&#125;</span><br><span class="line">(<span class="number">1</span>);</span><br><span class="line"><span class="comment">//,运算符</span></span><br><span class="line"><span class="comment">// fx(), fy();//两个都运行，返回fy();</span></span><br><span class="line"><span class="keyword">var</span> x = (<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(x);</span><br><span class="line"><span class="comment">//运算符exp1 || exp2,若exp1为真,返回exp1,否则返回exp2</span></span><br><span class="line"><span class="keyword">var</span> testexp = <span class="literal">true</span> || <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="literal">true</span> || <span class="literal">false</span>) <span class="built_in">console</span>.log(<span class="literal">true</span>);</span><br><span class="line"><span class="comment">//代码块=&#123;&#125;和表达式=()；()其中要有表达式    </span></span><br><span class="line"><span class="comment">//理解以下代码</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">foo</span>: f(<span class="number">3</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//&#123;&#125;代码块，foo:标签，f(3):表达式语句即函数</span></span><br><span class="line"><span class="comment">//函数也可以当成对象</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">song</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">with</span> (<span class="built_in">arguments</span>.callee) &#123;<span class="comment">//callee 是 arguments 对象的一个属性。它可以用于引用该函数的函数体内当前正在执行的函数。</span></span><br><span class="line">        <span class="built_in">console</span>.log(author + <span class="string">&#x27;:&#x27;</span> + peom);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">song.author = <span class="string">&quot;李白&quot;</span>;</span><br><span class="line">song.peom = <span class="string">&quot;汉家秦地月，流影照明妃。一上玉关道，天涯去不归&quot;</span>;</span><br><span class="line">song();</span><br></pre></td></tr></table></figure>
<h3 id="this的四大基本使用"><a href="#this的四大基本使用" class="headerlink" title="this的四大基本使用"></a>this的四大基本使用</h3><blockquote>
<p>1.纯函数的调用，this指全局</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> this_test_x = <span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">testOne</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.this_test_x);<span class="comment">//undefined的原因：单纯的js文件没得window需加上html</span></span><br><span class="line">&#125;</span><br><span class="line">testOne();</span><br></pre></td></tr></table></figure>
<blockquote>
<p>2.作为对象方法的调用,this指方法调用的上一级</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> testTwo = &#123;</span><br><span class="line">    <span class="attr">this_test_x</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="attr">func</span>: testOne</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">testTwo.func();</span><br></pre></td></tr></table></figure>
<blockquote>
<p>3.作为构造函数的调用,this指创建的对象</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">testThree</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.this_test_x = <span class="number">3</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> testThreeVar = <span class="keyword">new</span> testThree();</span><br><span class="line"><span class="built_in">console</span>.log(testThreeVar.this_test_x);</span><br></pre></td></tr></table></figure>
<blockquote>
<p>4.apply,call函数的调用,this指引入的对象</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> testFlour = &#123;</span><br><span class="line">    <span class="attr">this_test_x</span>: <span class="number">4</span></span><br><span class="line">&#125;;</span><br><span class="line">testOne.apply(testFlour);</span><br></pre></td></tr></table></figure>

<h3 id="和-的区别"><a href="#和-的区别" class="headerlink" title="==和===的区别"></a>==和===的区别</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> test_eqaul = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;test_eqaul==\&quot;1\&quot;:&quot;</span> + (test_eqaul == <span class="string">&quot;1&quot;</span>) + <span class="string">&quot;\n&quot;</span> + <span class="string">&quot;test_eqaul===1:&quot;</span> + (test_eqaul === <span class="number">1</span>));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;test_eqaul===\&quot;1\&quot;:&quot;</span> + (test_eqaul === <span class="string">&quot;1&quot;</span>) + <span class="string">&quot;\n&quot;</span> + <span class="string">&quot;test_eqaul===(Number)(\&quot;1\&quot;):&quot;</span> + (test_eqaul === (<span class="built_in">Number</span>)(<span class="string">&quot;1&quot;</span>)));</span><br><span class="line"> ==：不在意数据类型,转换成相同类型后比较，===：直接比较内存地址</span><br></pre></td></tr></table></figure>
<h3 id="值引用和赋值"><a href="#值引用和赋值" class="headerlink" title="值引用和赋值"></a>值引用和赋值</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">swap_ab</span>(<span class="params">...array_A</span>) </span>&#123;<span class="comment">//说明反序列也是赋值而不是引用</span></span><br><span class="line"></span><br><span class="line">    array_A[<span class="number">0</span>] = array_A[<span class="number">0</span>] ^ array_A[<span class="number">1</span>];<span class="comment">//俩个值交换的新方法[a,b]=[b,a]</span></span><br><span class="line">    array_A[<span class="number">1</span>] = array_A[<span class="number">0</span>] ^ array_A[<span class="number">1</span>];</span><br><span class="line">    array_A[<span class="number">0</span>] = array_A[<span class="number">0</span>] ^ array_A[<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> test_a = <span class="number">1</span>, test_b = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">var</span> test_swap = swap_ab(test_a, test_b);</span><br><span class="line"><span class="built_in">console</span>.log(test_a, test_b);</span><br><span class="line"><span class="keyword">var</span> abconstuct = &#123;</span><br><span class="line">    <span class="attr">a</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">b</span>: <span class="number">2</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">swap_abconstuct</span>(<span class="params">abconstuct</span>) </span>&#123;<span class="comment">//结构体也是赋值</span></span><br><span class="line">    abconstuct.a = abconstuct.a ^ abconstuct.b;</span><br><span class="line">    abconstuct.b = abconstuct.a ^ abconstuct.b;</span><br><span class="line">    abconstuct.a = abconstuct.a ^ abconstuct.b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(abconstuct.a, abconstuct.b);</span><br><span class="line"><span class="comment">// test_a = 1, test_b = 2;//重置ab值</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">swap_aball</span>(<span class="params"></span>) </span>&#123;<span class="comment">//在任何函数内部对外部的值都是引用</span></span><br><span class="line">    test_a = test_a ^ test_b;</span><br><span class="line">    test_b = test_a ^ test_b;</span><br><span class="line">    test_a = test_a ^ test_b;</span><br><span class="line">&#125;</span><br><span class="line">swap_aball();</span><br><span class="line"><span class="built_in">console</span>.log(test_a, test_b);</span><br><span class="line"><span class="comment">//原型prototype,在原型上添加在后续创建的类也可以使用，不使用只能在构造器中创建</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">test_no_prototype</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.a = <span class="string">&quot;a&quot;</span>;</span><br><span class="line">    &#125;     </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">test_prototype</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">test_prototype.prototype.a = <span class="string">&quot;b&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> testNoPrototype = <span class="keyword">new</span> test_no_prototype();</span><br><span class="line"><span class="keyword">var</span> testPrototype = <span class="keyword">new</span> test_prototype();</span><br><span class="line"><span class="built_in">console</span>.log(testNoPrototype.a, testPrototype.a);</span><br><span class="line"><span class="comment">//_proto_已废弃</span></span><br><span class="line"><span class="comment">// 该特性已经从 Web 标准中删除，虽然一些浏览器目前仍然支持它，但也许会在未来的某个时间停止支持，请尽量不要使用该特性。</span></span><br><span class="line"><span class="comment">//使用Object.getPrototypeOf(object)代替</span></span><br><span class="line"><span class="built_in">console</span>.log(test_prototype.prototype === <span class="built_in">Object</span>.getPrototypeOf(testPrototype));</span><br></pre></td></tr></table></figure>
<h3 id="尾递归和尾调用"><a href="#尾递归和尾调用" class="headerlink" title="尾递归和尾调用"></a>尾递归和尾调用</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun_digui</span>(<span class="params">n</span>) </span>&#123;<span class="comment">//正常递归</span></span><br><span class="line">    <span class="keyword">if</span> (n &lt; <span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> n * fun_digui(n - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun_weidigui</span>(<span class="params">n, total = <span class="number">1</span></span>) </span>&#123;<span class="comment">//尾递归</span></span><br><span class="line">    <span class="keyword">if</span> (n &lt; <span class="number">1</span>) <span class="keyword">return</span> total;</span><br><span class="line">    <span class="keyword">return</span> fun_weidigui(n - <span class="number">1</span>, n * total);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(fun_digui(<span class="number">3</span>), fun_weidigui(<span class="number">3</span>));</span><br></pre></td></tr></table></figure>
<h3 id="柯里化-接受多个参数的函数转变为接受单个参数的函数并返回余下参数的函数"><a href="#柯里化-接受多个参数的函数转变为接受单个参数的函数并返回余下参数的函数" class="headerlink" title="柯里化:接受多个参数的函数转变为接受单个参数的函数并返回余下参数的函数"></a>柯里化:接受多个参数的函数转变为接受单个参数的函数并返回余下参数的函数</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun_Curring</span>(<span class="params">n</span>) </span>&#123;<span class="comment">//简单的</span></span><br><span class="line">    <span class="keyword">return</span> fun_weidigui(n, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun_recusion_curring</span>(<span class="params">n</span>) </span>&#123;<span class="comment">//中等</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">fun_recusion_curring_two</span>(<span class="params">total = <span class="number">1</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (n &lt;= <span class="number">1</span>) <span class="keyword">return</span> total;</span><br><span class="line">        <span class="keyword">return</span> (n--) * fun_recusion_curring_two(total);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(fun_recusion_curring(<span class="number">3</span>)(<span class="number">1</span>));</span><br><span class="line"><span class="comment">//双重=&gt;的使用,类似与柯里化函数</span></span><br><span class="line"><span class="keyword">const</span> doubleArrow = <span class="function">(<span class="params">a, b</span>) =&gt;</span> <span class="function">(<span class="params">c = <span class="number">1</span></span>) =&gt;</span> a + b + c;</span><br><span class="line"><span class="keyword">const</span> test_doubleArrow = doubleArrow(<span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line"><span class="built_in">console</span>.log(test_doubleArrow());</span><br><span class="line"><span class="comment">//例子：绑定任意一个对象，可选的调用函数并附加实参</span></span><br><span class="line"><span class="keyword">const</span> bindKey = <span class="function">(<span class="params">context, fun, ...boundargs</span>) =&gt;</span> <span class="function">(<span class="params">...args</span>) =&gt;</span></span><br><span class="line">    context[fun].apply(context, [...boundargs, ...args]);</span><br><span class="line"><span class="keyword">const</span> test_bindKey = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;sion&quot;</span>,</span><br><span class="line">    <span class="attr">fun</span>: <span class="function"><span class="keyword">function</span> <span class="title">greeting</span>(<span class="params">fun_a, fun_b</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> fun_a + <span class="string">&#x27; &#x27;</span> + <span class="built_in">this</span>.name + fun_b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> test_bindKey_fun = bindKey(test_bindKey, <span class="string">&quot;fun&quot;</span>);<span class="comment">//演示柯里化函数，用双括号也可</span></span><br><span class="line"><span class="built_in">console</span>.log(test_bindKey_fun(<span class="string">&quot;hi&quot;</span>, <span class="string">&quot;!&quot;</span>));</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
</search>
